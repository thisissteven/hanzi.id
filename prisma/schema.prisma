// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String  @id @default(cuid())
  username String? @unique

  email         String?   @unique
  emailVerified DateTime?

  // --- Unused ---
  name  String?
  image String?
  // --- Unused ---

  role Role @default(USER)

  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]

  readings Reading[]
  books    Book[]
}

model Image {
  id String @id @default(cuid())

  smallUrl  String
  mediumUrl String
  source    String
  width     Int
  height    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String @unique
}

model Book {
  id     String @id @default(cuid())
  userId String

  title       String @default("Untitled")
  description String @default("No description yet.")

  image Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters Chapter[]
  readings Reading[]
}

model Chapter {
  id     String @id @default(cuid())
  bookId String

  title                String @default("Untitled")
  shortContent         String @default("-")
  content              String @default("-")
  wordCount            Int    @default(0)
  estimatedReadingTime Int    @default(0)
  totalSentences       Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  readings Reading[]
}

model Reading {
  id     String @id @default(cuid())
  userId String

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  currentSentenceIndex Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
